@model PDMSCore.BusinessObjects.Project

@using PDMSCore.HtmlHelpers
@{
    ViewBag.Title = "Index";
}



@*<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>*@

@*<script src="~/js/jquery-1.10.2.js"></script>*@
<script type="text/javascript">
    //$(document).ready(function () {
    //    document.getElementById("btnOpenModal").addEventListener("submit", function ());
    //};


    //function MonkeyPatchAutocomplete() {
    //    // Musi byt zde a ne v site.js.
    //    // https://stackoverflow.com/questions/2435964/how-can-i-custom-format-the-autocomplete-plug-in-results
    //    // Don't really need to save the old fn,
    //    // but I could chain if I wanted to
    //    //var oldFn = $.ui.Autocomplete.prototype._renderItem;

    //    $.ui.Autocomplete.prototype._renderItem = function (ul, item) {
    //        var re = new RegExp("^" + this.term, "i");
    //        var t = item.label.replace(re, "<span style='font-weight:bold;'>" + this.term + "</span>");
    //        return $("<li></li>")
    //            .data("item.autocomplete", item)
    //            .append("<a>" + t + "</a>")
    //            .appendTo(ul);
    //    };
    //}
    //function Autocomplete() {
    //    // Musi byt zde a ne v site.js.
    //    $(".AutoComplete").Autocomplete({
    //        minLength: 1,
    //        autoFocus: true,
    //        source: function (request, response) {
    //            $.ajax({
    //                url: "/Project/AjaxAutoComplete/",
    //                type: "POST",
    //                highlightPhrase: false,
    //                dataType: "json",
    //                data: { prefix: request.term, id: $(this.element).prop("id") },
    //                success: function (data) {
    //                    response($.map(data, function (item) {
    //                        // properties "item" musi zacinat malym pismenem !!!
    //                        // A pokud se do "value" dam hodnotu (jako "item.id"),
    //                        // tak se pri submitu posle na server pouze tato hodnota (id) a ne ten text v item.suggestion.
    //                        return { label: item.suggestion/*, value: item.id */ };
    //                    }))
    //                }
    //            })
    //        },
    //        messages: {
    //            noResults: "", results: ""
    //        }
    //    });
    //}

    //function getFromController(url, name, model) {
    //    alert("separe async");
    //    var obj = $(‘#’ + name);
    //    ajaxCall(url, obj, model, ‘GET’);
    //}
    @*$(document).ready(function () {
        //MonkeyPatchAutocomplete();
        //Autocomplete();
        //function ajaxCall(url, obj, model, verb) {
        //    $.ajax({
        //        cache: false,
        //        type: verb,
        //        url: url,
        //        data: model,
        //        beforeSend: function () {
        //            obj.addClass(window.async.disabledClass);
        //        },
        //        success: function (data) {
        //            obj.replaceWith(data);
        //        },
        //        error: function (xhr, ajaxOptions, thrownError) {
        //            //log this information or show it…
        //            obj.replaceWith(xhr.responseText);
        //        },
        //        complete: function () {
        //            obj.removeClass(window.async.disabledClass);
        //            updateURL(url, model, verb);
        //        }

        //    });

        //}

        //function updateURL(action, model, verb) {
        //    if (history.pushState) {
        //        var split = action.split("/");
        //        split[split.length – 1] = split[split.length – 1].replace("Async", ”);
        //        action = split.join("/");
        //        if (model != null && verb != "POST")
        //            action = action + "?" + $.param(model);
        //        var newurl = window.location.protocol + "//" + window.location.host;
        //        newurl = newurl + action;
        //        window.history.pushState({ path: newurl }, ”, newurl);
        //    }

        //}

        $("#PartialViewWraper").change(function () {
            var categoryId =  $("#ddlCategory").val();
               $("#dvCategoryResults").load('@(Url.Action("GetCategoryProducts","Home",null, Request.Url.Scheme))?categoryId=' + categoryId);
        });
    })*@</script>

<div class="Content">
    @for (int i = 0; i < Model.PanelList.Count; i++)
    {

        //To nize mozna neni nutne. Toto take funguje:      @Html.Partial("PartialPanel", @Model.PanelList[i])
        //@await Html.PartialAsync("PartialPanel", @Model.PanelList[i])
        @await Html.PartialAsync("PartialPanel", @Model.PanelList[i], new ViewDataDictionary(this.ViewData))


        @*<div>
                <form method="post">
                    <input class="AutoComplete" type="text" id="id1" name="jmeno1" placeholder="ph1" label="MujLabel1" />
                    <input class="AutoComplete" type="text" id="id2" name="jmeno2" placeholder="ph2" label="MujLabel2" />
                    <input class="AutoComplete" type="text" id="id3" name="jmeno3" placeholder="ph3" label="MujLabel3" />
                    <input type="submit">
                </form>
            </div>*@
    }


    <div class="Panel x1" id="Panel-3">
        <div class="Panel-Header">
            <div class="Panel-Header-Left">GetRandom</div>
            <div class="Panel-Header-Right">
                <div class="dd-menu"><i aria-hidden="true" class="fa fa-gear dd-menu-btn" onclick=""></i><div class="dd-menu-content" id="PanelMenu3"><a href="www0.cz">0</a><a href="www1.cz">1</a><a href="www2.cz">2</a><a href="www3.cz">3</a><a href="www4.cz">4</a></div></div>
            </div>
        </div>
        <div class="Panel-Body">
            <label id="Hovno">Vybrano:</label>
            <input type="button" id="btnOpenModal" onclick="OpenModal('myModal1','Hovno')" />
            <div id="myModal1" class="Modal">
                <div class="Modal-content">
                    <span class="CloseModal">&times;</span>
                    <p>....</p>
                </div>
            </div>

        </div>
    </div>


    <div id='myModal' class='modal'>
        <div class="modal-dialog">
            <div class="modal-content">
                <div id='myModalContent'></div>
            </div>
        </div>
    </div>

</div>



@section SideMenu
{
    @Model.SideMenu.HtmlText()
}

@section UserSection
{
    
}

